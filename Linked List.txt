#include <iostream>

using namespace std;

class Node{
    
    public:
    int data;
    Node* next;
    
    //constructor
    Node(int data){
        this -> data = data;
        this -> next = NULL;
    }
};


int main()
{  
    Node* node1 = new Node(10);
    cout<< node1 -> data << endl;
    cout<< node1 -> next << endl;

    return 0;
}

// Insertion

#include <iostream>

using namespace std;

class Node {

    public:
    int data;
    Node* next;

    //constructor
    Node(int data) {
        this -> data = data;
        this -> next = NULL;
    }
};
void insertAtHead(Node* &head, int d) {

    // new node create
    Node* temp = new Node(d);
    temp -> next = head;
    head = temp;
}

void insertAtTail(Node* &tail, int d){
    // new node creat
    Node* temp = new Node(d);
    tail -> next = temp;
    tail = temp;
}
void print(Node* &head) {

    if(head == NULL) {
        cout << "List is empty "<< endl;
        return ;
    }
    Node* temp = head;

    while(temp != NULL ) {
        cout << temp -> data << " ";
        temp = temp -> next;
    }
    cout << endl;
}
int main()
{
     //created a new node
    Node* node1 = new Node(10);
    cout << node1 -> data << endl;
    cout << node1 -> next << endl;
    
    //head pointed to node1
    Node* head = node1; 
    Node* tail = node1;
    
    print(head);

    insertAtTail(head, 12);

    print(tail);
    
    insertAtTail(head, 15);
    print(tail);

    return 0;
}




// Deleteion

#include <iostream>

using namespace std;


class Node {

    public:
    int data;
    Node* next;

    //constructor
    Node(int data) {
        this -> data = data;
        this -> next = NULL;
    }
    
    //destructor
    ~Node(){
        int value = this -> data;
        // memory free 
        if(this -> next != NULL){
            delete next;
           this -> next = NULL;
        }
        cout << "memory is free for node with data" << value << endl;
    }
};
void insertAtHead(Node* &head, int d) {

    // new node create
    Node* temp = new Node(d);
    temp -> next = head;
    head = temp;
}

void insertAtTail(Node* &tail, int d){
    // new node creat
    Node* temp = new Node(d);
    tail -> next = temp;
    tail = temp;
}
void print(Node* &head) {

    if(head == NULL) {
        cout << "List is empty "<< endl;
        return ;
    }
    Node* temp = head;

    while(temp != NULL ) {
        cout << temp -> data << " ";
        temp = temp -> next;
    }
    cout << endl;
}
 
void insertAtposition(Node* &head, int position, int d){
    
    if(position == 1){
       insertAtHead(head,d);
       return;
    }
    Node* temp = head;
    int cnt = 1;
    
    while(cnt < position){
        temp = temp->next;
        cnt++;
    }
    
    // creating a node for d
    
    Node* nodeToInsert = new Node(d);
    
    nodeToInsert -> next = temp -> next;
    
    temp -> next = nodeToInsert;
}

void deleteNode(int position,Node* &head){
    
    // deletion first or start Node
    if(position == 1){
        Node* temp = head;
        head = head -> next;
        // memory free start node
        temp -> next = NULL;
        delete temp;
    }
    else{
        
        //deleting any node or last node
        Node* curr = head;
        Node* prev = NULL;
        
        int cnt = 1;
        while(cnt <= position){
            prev = curr;
            curr = curr -> next;
            cnt++;
        }
        
        prev -> next = curr -> next;
        curr -> next = NULL;
        delete curr;
        
    }
}
int main()
{
     //created a new node
    Node* node1 = new Node(10);
    cout << node1 -> data << endl;
    cout << node1 -> next << endl;
    
    //head pointed to node1
    Node* head = node1; 
    Node* tail = node1;
    print(head);

    insertAtTail(head, 12);
    print(tail);
    
    insertAtTail(head, 15);
    print(tail);

    insertAtposition(head,2,22);
    print(head);
    
    cout << "head" << head -> data << endl;
    cout << "tail" << tail -> data << endl;
    
    deleteNode(3,head);
    print(head);
    
    
    
    return 0;
}
